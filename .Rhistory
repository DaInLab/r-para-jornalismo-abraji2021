library(tidyverse) # este pacote oferece uma GRANDE quantidade
library(janitor) # limpeza de dados
library(data.table) # funções para lidar com bases de dados GRANDES
dados_2020 <-
fread(
"dados/INFLUD-2020.csv",
# Caminho até onde o arquivo está salvo
# nome das colunas que queremos importar
select = c(
"CLASSI_FIN",
"DT_ENCERRA",
"DT_ENTUTI",
"DT_EVOLUCA",
"EVOLUCAO",
"CS_SEXO",
"DT_NASC",
"SG_UF_NOT",
"ID_MUNICIP"
)
)
dados_2020 <-
fread(
"dados/INFLUD-2020.csv",
# Caminho até onde o arquivo está salvo
# nome das colunas que queremos importar
select = c(
"CLASSI_FIN",
"DT_ENCERRA",
"DT_ENTUTI",
"DT_EVOLUCA",
"EVOLUCAO",
"CS_SEXO",
"DT_NASC",
"SG_UF_NOT",
"ID_MUNICIP"
)
)
dados_2021 <-
fread(
"dados/INFLUD-2021.csv",
# Caminho até onde o arquivo está salvo
# nome das colunas que queremos importar
select = c(
"CLASSI_FIN",
"DT_ENCERRA",
"DT_ENTUTI",
"DT_EVOLUCA",
"EVOLUCAO",
"CS_SEXO",
"DT_NASC",
"SG_UF_NOT",
"ID_MUNICIP"
)
)
dados <- bind_rows(dados_2020, dados_2021)
# número de linhas
nrow(dados)
# número de colunas
ncol(dados)
# resumo: quais são as principais colunas/dados no nosso arquivo?
glimpse(dados)
# manter dados de mortes covid-19
mortes_covid <- dados %>%
# limpar o nome das colunas
janitor::clean_names() %>%
# filtrar as linhas em que a classificação final do caso
# seja igual à 5 (no dicionário de dados: 5-SRAG por covid-19)
# E que também tenha evolução igual à 2
# (no dicionário de dados: 2-Óbito)
filter(classi_fin == 5 & evolucao == 2) %>%
# remover as colunas que não serão mais necessárias
select(-classi_fin,-evolucao)
# Exportar a base criada em um arquivo .Rds
write_rds(mortes_covid, "dados-output/mortes_covid.Rds")
library(tidyverse) # este pacote oferece uma GRANDE quantidade
# Importando a base filtrada
mortes_covid <- read_rds("dados-output/mortes_covid.Rds")
mortes_covid %>%
count()  # faz uma contagem
mortes_covid %>%
count(cs_sexo) %>% # faz uma contagem por grupos
arrange(desc(n)) # ordenar por alguma variável
# estados!
mortes_estados <- mortes_covid %>%
count(sg_uf_not) %>% # faz uma contagem por grupos
arrange(desc(n)) # ordenar por alguma variável
View(mortes_estados) # função View() é útil para visualizar
head(mortes_estados) # head é a função pra mostrar as primeiras
tail(mortes_estados) # tail é a função pra mostrar as últimas
mortes_municipios <- mortes_covid %>%
count(sg_uf_not, id_municip) %>% # faz uma contagem por grupos
arrange(desc(n)) # ordenar por alguma variável
head(mortes_municipios) # head é a função pra mostrar as primeiras
tail(mortes_municipios) # tail é a função pra mostrar as últimas
mortes_covid <- read_rds("dados-output/mortes_covid.Rds")
resposta_4 <- mortes_covid %>%
mutate(dt_evoluca = case_when(dt_evoluca == "" ~ dt_encerra,
dt_evoluca != "" ~ dt_evoluca)) %>%
separate(dt_evoluca, c("dia", "mes", "ano"), sep = "/") %>%
select(-dt_encerra, -dia) %>%
filter(ano == "2021" & !mes %in% c("07", "08")) %>%
#unite(mes_ano, c("mes", "ano"), sep = "/") %>%
group_by(mes, sg_uf_not) %>%
summarise(n_mortes = n()) %>%
arrange(desc(n_mortes)) %>%
mutate(regiao = case_when(sg_uf_not %in% c("SP", "RJ", "ES", "MG") ~ "Sudeste",
sg_uf_not %in% c("RS", "SC", "PR") ~ "Sul",
sg_uf_not %in% c("GO", "DF", "MS", "MT") ~ "Centro-Oeste",
sg_uf_not %in% c("AM", "AP", "RO", "RR", "TO", "AC", "PA") ~ "Norte",
sg_uf_not %in% c("RN", "CE", "BA", "MA", "PB", "SE", "PI", "PE", "AL") ~ "Nordeste"))
resposta_4_reg <- resposta_4 %>%
filter(regiao == "Norte")
resposta_4_reg %>%
ggplot(aes(x = mes, y = n_mortes)) +
geom_col() +
facet_wrap(~sg_uf_not)
resposta_4_reg %>%
ggplot(aes(x = mes, y = n_mortes, color = sg_uf_not)) +
geom_point()
resposta_4_reg %>%
ggplot(aes(x = mes, y = n_mortes, group = sg_uf_not, color = sg_uf_not)) +
geom_line() +
facet_wrap(~sg_uf_not)
pop_brasil <- fread("https://raw.githubusercontent.com/turicas/censo-ibge/main/data/output/populacao-estimada-2020_2020-08-27.csv")
pop_uf <- pop_brasil %>%
group_by(state) %>%
summarise(populacao = sum(estimated_population))
pop_uf <- pop_brasil %>%
group_by(state) %>%
summarise(populacao = sum(estimated_population))
resposta_4_pop <- resposta_4 %>%
left_join(pop_uf, by = c("sg_uf_not" = "state")) %>%
mutate(taxa_100mil = (n_mortes / populacao) * 100000) %>%
arrange(desc(taxa_100mil)) %>%
filter(regiao == "Sul")
resposta_4_pop %>%
ggplot(aes(x = mes, y = taxa_100mil, group = sg_uf_not, color = sg_uf_not)) +
geom_line(position = "identity")
resposta_4_pop %>%
ggplot(aes(x = mes, y = taxa_100mil, color = sg_uf_not)) +
geom_point()
resposta_1 <- mortes_covid %>% #pegamos nossa base de dados
mutate(dias_uti_morte = #criamos uma nova coluna para fazer um cálculo
dmy(dt_evoluca)-dmy(dt_entuti)) %>% #Subtraímos uma data pela outra,
#usando o lubridate para colocá-las num formato de data passível de cálculo
group_by(dias_uti_morte) %>% #agrupamos pelo número de dias na UTI
summarise(n_casos = n()) %>% # e fazemos uma contagem de mortes relacionadas
arrange(dias_uti_morte) # ordenamos pelos dias passados em UTI
library(lubridate) # funções para lidar com datas
# Importando a base filtrada
mortes_covid <- read_rds("dados-output/mortes_covid.Rds")
resposta_1 <- mortes_covid %>% #pegamos nossa base de dados
mutate(dias_uti_morte = #criamos uma nova coluna para fazer um cálculo
dmy(dt_evoluca)-dmy(dt_entuti)) %>% #Subtraímos uma data pela outra,
#usando o lubridate para colocá-las num formato de data passível de cálculo
group_by(dias_uti_morte) %>% #agrupamos pelo número de dias na UTI
summarise(n_casos = n()) %>% # e fazemos uma contagem de mortes relacionadas
arrange(dias_uti_morte) # ordenamos pelos dias passados em UTI
resposta_2 <- mortes_covid %>%
filter(id_municip == "MANAUS") %>% #Só as mortes em Manaus/AM
mutate(dias_uti_morte = dmy(dt_evoluca)-dmy(dt_entuti)) %>%
group_by(dias_uti_morte) %>%
summarise(n_casos = n()) %>%
arrange(dias_uti_morte)
resposta_3 <- mortes_covid %>%
mutate(dias_uti_morte = as.numeric(dmy(dt_evoluca)-dmy(dt_entuti)),
idade = round(as.numeric(dmy(dt_evoluca) - dmy(dt_nasc))/365)) %>%
#determinamos a idade
group_by(idade) %>%
summarise(mediana_uti = median(dias_uti_morte, na.rm = TRUE)) %>%
# determinamos a mediana dentro dos grupos por idade
arrange(idade)
resposta_4 <- mortes_covid %>%
mutate(dias_uti_morte = as.numeric(dmy(dt_evoluca)-dmy(dt_entuti))) %>%
group_by(ano = year(dmy(dt_evoluca)), cs_sexo) %>%
summarise(mediana_uti = median(dias_uti_morte, na.rm = TRUE)) %>%
arrange(ano)
